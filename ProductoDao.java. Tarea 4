Codigo ProductoDao.java
  package com.akihabara.market.dao;

import com.akihabara.market.model.ProductoOtaku;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class ProductoDAO {
    private DatabaseConnection databaseConnection;


    public ProductoDAO() {
        this.databaseConnection = new DatabaseConnection();
    }

    public void agregarProducto(ProductoOtaku producto) {
        String sql = "INSERT INTO producto (nombre, categoria, precio) VALUES (?, ?, ?)";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, producto.getNombre());
            preparedStatement.setString(2, producto.getCategoria());
            preparedStatement.setDouble(3, producto.getPrecio());
            preparedStatement.executeUpdate();
            System.out.println("Producto agregado: " + producto);
        } catch (SQLException e) {
            System.err.println("Error al agregar el producto: " + e.getMessage());
        }
    }


    public ProductoOtaku obtenerProductoPorId(int id) {
        String sql = "SELECT * FROM producto WHERE id = ?";
        ProductoOtaku producto = null;
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                producto = new ProductoOtaku(resultSet.getString("nombre"),
                                             resultSet.getString("categoria"),
                                             resultSet.getDouble("precio"));
                System.out.println("Producto obtenido: " + producto);
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener el producto: " + e.getMessage());
        }
        return producto;
    }

 
    public List<ProductoOtaku> obtenerTodosLosProductos() {
        List<ProductoOtaku> productos = new ArrayList<>();
        String sql = "SELECT * FROM producto";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                ProductoOtaku producto = new ProductoOtaku(resultSet.getString("nombre"),
                                                           resultSet.getString("categoria"),
                                                           resultSet.getDouble("precio"));
                productos.add(producto);
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener todos los productos: " + e.getMessage());
        }
        return productos;
    }


    public boolean actualizarProducto(ProductoOtaku producto) {
        String sql = "UPDATE producto SET nombre = ?, categoria = ?, precio = ? WHERE id = ?";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, producto.getNombre());
            preparedStatement.setString(2, producto.getCategoria());
            preparedStatement.setDouble(3, producto.getPrecio());

            preparedStatement.setInt(4, producto.getId()); 
            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.err.println("Error al actualizar el producto: " + e.getMessage());
            return false;
        }
    }


    public boolean eliminarProducto(int id) {
        String sql = "DELETE FROM producto WHERE id = ?";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);
            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.err.println("Error al eliminar el producto: " + e.getMessage());
            return false;
        }
    }

 
    public List<ProductoOtaku> buscarProductosPorNombre(String nombre) {
        List<ProductoOtaku> productos = new ArrayList<>();
        String sql = "SELECT * FROM producto WHERE nombre LIKE ?";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, "%" + nombre + "%");
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                ProductoOtaku producto = new ProductoOtaku(resultSet.getString("nombre"),
                                                           resultSet.getString("categoria"),
                                                           resultSet.getDouble("precio"));
                productos.add(producto);
            }
        } catch (SQLException e) {
            System.err.println("Error al buscar productos por nombre: " + e.getMessage());
        }
        return productos;
    }


    public List<ProductoOtaku> buscarProductoPorCategoria(String categoria) {
        List<ProductoOtaku> productos = new ArrayList<>();
        String sql = "SELECT * FROM producto WHERE categoria = ?";
        try (Connection connection = databaseConnection.getConexion();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, categoria);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                ProductoOtaku producto = new ProductoOtaku(resultSet.getString("nombre"),
                                                           resultSet.getString("categoria"),
                                                           resultSet.getDouble("precio"));
                productos.add(producto);
            }
        } catch (SQLException e) {
            System.err.println("Error al buscar productos por categor√≠a: " + e.getMessage());
        }
        return productos;
    }
}
